# templates/auth_template/views_jwt.py.template
# Basic views for JWT authentication

from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework import status

# TODO: Create serializers for user registration, login, etc.
# from .serializers import UserSerializer, LoginSerializer

class RegisterView(APIView):
    """API view for user registration."""
    def post(self, request):
        # TODO: Implement user registration logic
        # serializer = UserSerializer(data=request.data)
        # if serializer.is_valid():
        #     user = serializer.save()
        #     refresh = RefreshToken.for_user(user)
        #     return Response({
        #         'refresh': str(refresh),
        #         'access': str(refresh.access_token),
        #     }, status=status.HTTP_201_CREATED)
        # return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        return Response({"message": "Registration not implemented yet"}, status=status.HTTP_501_NOT_IMPLEMENTED)


class LoginView(APIView):
    """API view for user login."""
    def post(self, request):
        # TODO: Implement user login logic
        # serializer = LoginSerializer(data=request.data)
        # if serializer.is_valid():
        #     user = serializer.validated_data['user']
        #     refresh = RefreshToken.for_user(user)
        #     return Response({
        #         'refresh': str(refresh),
        #         'access': str(refresh.access_token),
        #     }, status=status.HTTP_200_OK)
        # return Response(serializer.errors, status=status.HTTP_401_UNAUTHORIZED)
        return Response({"message": "Login not implemented yet"}, status=status.HTTP_501_NOT_IMPLEMENTED)

# TODO: Add other views as needed (e.g., token refresh, password reset)

