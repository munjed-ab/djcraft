from pathlib import Path
from typing import List

class RequirementsManager:
    """
    Manages the requirements.txt file for the generated project.
    Handles adding required packages from various components.
    """
    def __init__(self, project_path: Path):
        """
        Initialize the RequirementsManager.

        Args:
            project_path: The root path of the project.
        """
        self.project_path = project_path
        self.requirements_file_path = self.project_path / 'requirements.txt'
        self._packages = set()

        self._load_existing_packages()

    def _load_existing_packages(self) -> None:
        """
        Loads packages from an existing requirements.txt file into the internal set.
        """
        if self.requirements_file_path.exists():
            try:
                with open(self.requirements_file_path, 'r', encoding='utf-8') as f:
                    for line in f:
                        line = line.strip()
                        if line and not line.startswith('#'): # Ignore empty lines and comments
                            self._packages.add(line)
            except Exception as e:
                print(f"Warning: Could not load existing requirements.txt: {e}")


    def add_packages(self, packages: List[str]) -> None:
        """
        Adds a list of packages to the internal set of requirements.

        Args:
            packages: A list of package strings (e.g., ['django>=4.0', 'celery']).
        """
        for package in packages:
            self._packages.add(package.strip()) # Add stripped package name

    def write_requirements_file(self) -> None:
        """
        Writes the accumulated unique packages to the requirements.txt file.
        Sorts packages alphabetically for consistency.
        """
        try:
            self.project_path.mkdir(parents=True, exist_ok=True)

            with open(self.requirements_file_path, 'w', encoding='utf-8') as f:
                # Write a header comment
                f.write("# Project requirements generated by Django Boilerplate Generator\n\n")
                # Write sorted unique packages
                for package in sorted(list(self._packages)):
                    f.write(f"{package}\n")
        except Exception as e:
            raise IOError(f"Error writing requirements.txt to {self.requirements_file_path}: {e}") from e
