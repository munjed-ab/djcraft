"""
Django settings for {{ project_name }} project.

Generated by 'djcraft'
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# The calculation of BASE_DIR depends on the core location.
BASE_DIR = Path(__file__).resolve(){{ parent_dir_calculation }}


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/{{ django_version }}/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Replace with a strong, randomly generated key in production
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-{{ secret_key_placeholder }}')

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG is set in environment-specific settings (dev.py/prod.py)

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '127.0.0.1,localhost').split(',')


# Application definition

INSTALLED_APPS = [
    {% for app in installed_apps_list %}
    '{{ app | safe }}'{% if not loop.last %},{% endif %}
    {% endfor %}
]

MIDDLEWARE = [
    {% for middleware in middleware_list %}
    '{{ middleware | safe }}'{% if not loop.last %},{% endif %}
    {% endfor %}
]

ROOT_URLCONF = '{{ core_import_base | safe }}.urls'

WSGI_APPLICATION = '{{ core_import_base | safe }}.wsgi.application'

ASGI_APPLICATION = '{{ core_import_base | safe }}.asgi.application'


# Database
# https://docs.djangoproject.com/en/{{ django_version }}/ref/settings/#databases

# Default database configuration
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# {% if use_db_router %}
# Database Router Configuration
# DATABASE_ROUTERS = ['{{ core_import_base | safe }}.router.DatabaseRouter']
# Configure additional databases here based on your router setup
# DATABASES['my_other_db'] = { ... }
# {% endif %}


# Password validation
# https://docs.djangoproject.com/en/{{ django_version }}/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# {% if use_auth %}
# Authentication Configuration
# Custom user model if enabled
# AUTH_USER_MODEL = 'users.CustomUser' # Example if using 'users' app for custom user
# {% endif %}


# Internationalization
# https://docs.djangoproject.com/en/{{ django_version }}/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/{{ django_version }}/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # Collect static files here
STATICFILES_DIRS = [ # Look for static files in these directories
    os.path.join(BASE_DIR, 'static'),
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media') # Store uploaded media here


# Default primary key field type
# https://docs.djangoproject.com/en/{{ django_version }}/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# {% if use_redis %}
# Redis Configuration (as Cache)
# Used for caching, sessions, and potentially as a Celery broker
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': os.environ.get('REDIS_URL', 'redis://redis:6379/1'), # Use DB 1 for cache
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}

# Optional: Configure Redis for sessions if needed (uncomment if use_for_sessions option is true)
# SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
# SESSION_CACHE_ALIAS = 'default'
# {% endif %}

# {% if use_celery %}
# Celery Configuration
CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', '{{ celery_broker_url_placeholder }}') # e.g., redis://redis:6379/0 or amqp://guest:guest@rabbitmq:5672//
CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', '{{ celery_result_backend_placeholder }}') # e.g., redis://redis:6379/0 or django-db
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'
# Add other Celery settings as needed (e.g., CELERY_BEAT_SCHEDULE)
# {% endif %}

# {% if use_rest_api %}
# Django Rest Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    # Add other DRF settings as needed (e.g., pagination, throttling)
    # {% if swagger %}
    # 'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema', # Requires coreapi
    # {% endif %}
}
# {% endif %}

# Add other common settings here
# Example: CORS headers if needed
# CORS_ALLOWED_ORIGINS = [...]

# Example: Email settings
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # During development

# Example: Logging configuration
# LOGGING = { ... }

